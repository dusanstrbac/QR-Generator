(()=>{var t={44:(t,n)=>{const e="[0-9]+";let r="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";r=r.replace(/u/g,"\\u");const o="(?:(?![A-Z0-9 $%*+\\-./:]|"+r+")(?:.|[\r\n]))+";n.KANJI=new RegExp(r,"g"),n.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g"),n.BYTE=new RegExp(o,"g"),n.NUMERIC=new RegExp(e,"g"),n.ALPHANUMERIC=new RegExp("[A-Z $%*+\\-./:]+","g");const i=new RegExp("^"+r+"$"),a=new RegExp("^"+e+"$"),s=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");n.testKanji=function(t){return i.test(t)},n.testNumeric=function(t){return a.test(t)},n.testAlphanumeric=function(t){return s.test(t)}},56:(t,n,e)=>{"use strict";t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},72:t=>{"use strict";var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],u=r.base?c[0]+r.base:c[0],d=i[u]||0,l="".concat(u," ").concat(d);i[u]=d+1;var f=e(l),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)n[f].references++,n[f].updater(h);else{var g=o(h,r);r.byIndex=s,n.splice(s,0,{identifier:l,updater:g,references:1})}a.push(l)}return a}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var c=r(t,o),u=0;u<i.length;u++){var d=e(i[u]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},83:(t,n,e)=>{"use strict";e.d(n,{A:()=>s});var r=e(354),o=e.n(r),i=e(314),a=e.n(i)()(o());a.push([t.id,"/* Osnovne postavke */\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: #f0f4f8;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  box-sizing: border-box;\n}\n\n/* Container za centriranje i vizuelni stil */\n.container {\n  background-color: #fff;\n  padding: 30px;\n  border-radius: 12px;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\n  max-width: 400px;\n  width: 100%;\n  text-align: center;\n  border: 1px solid #e0e0e0;\n  transition: transform 0.3s ease-in-out;\n}\n\n/* Efekat na hover za container */\n.container:hover {\n  transform: translateY(-5px);\n}\n\n/* Input polje za unos teksta */\ninput {\n  padding: 12px;\n  width: 100%;\n  margin: 10px 0;\n  border-radius: 6px;\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n  font-size: 16px;\n  transition: border-color 0.3s;\n}\n\ninput:focus {\n  border-color: #007bff;\n  outline: none;\n}\n\n/* Dugme */\nbutton {\n  padding: 12px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-size: 16px;\n  cursor: pointer;\n  width: 100%;\n  transition: background-color 0.3s ease;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n/* QR kod */\n#qrcode {\n  margin-top: 20px;\n  border: 1px solid #ddd;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n  max-width: 100%;\n  width: 300px;\n  margin: 20px auto;\n}\n/* PREUZIMANJE QR koda */\n#downloadBtn {\n  margin-top: 20px;\n  padding: 10px 20px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n#downloadBtn:hover {\n  background-color: #218838;\n}\n\n#downloadBtn:focus {\n  outline: none;\n}\n\n\n/* Mobile responsive dizajn */\n@media (max-width: 480px) {\n  .container {\n    padding: 20px;\n    width: 90%;\n  }\n\n  button {\n    font-size: 14px;\n    padding: 10px;\n  }\n\n  input {\n    font-size: 14px;\n    padding: 10px;\n  }\n}\n","",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA,qBAAqB;AACrB;EACE,4DAA4D;EAC5D,SAAS;EACT,UAAU;EACV,yBAAyB;EACzB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;EACb,sBAAsB;AACxB;;AAEA,6CAA6C;AAC7C;EACE,sBAAsB;EACtB,aAAa;EACb,mBAAmB;EACnB,0CAA0C;EAC1C,gBAAgB;EAChB,WAAW;EACX,kBAAkB;EAClB,yBAAyB;EACzB,sCAAsC;AACxC;;AAEA,iCAAiC;AACjC;EACE,2BAA2B;AAC7B;;AAEA,+BAA+B;AAC/B;EACE,aAAa;EACb,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,sBAAsB;EACtB,sBAAsB;EACtB,eAAe;EACf,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;EACrB,aAAa;AACf;;AAEA,UAAU;AACV;EACE,kBAAkB;EAClB,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,eAAe;EACf,WAAW;EACX,sCAAsC;AACxC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,WAAW;AACX;EACE,gBAAgB;EAChB,sBAAsB;EACtB,aAAa;EACb,kBAAkB;EAClB,yCAAyC;EACzC,sBAAsB;EACtB,eAAe;EACf,YAAY;EACZ,iBAAiB;AACnB;AACA,wBAAwB;AACxB;EACE,gBAAgB;EAChB,kBAAkB;EAClB,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;AACf;;;AAGA,6BAA6B;AAC7B;EACE;IACE,aAAa;IACb,UAAU;EACZ;;EAEA;IACE,eAAe;IACf,aAAa;EACf;;EAEA;IACE,eAAe;IACf,aAAa;EACf;AACF",sourcesContent:["/* Osnovne postavke */\r\nbody {\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  background-color: #f0f4f8;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* Container za centriranje i vizuelni stil */\r\n.container {\r\n  background-color: #fff;\r\n  padding: 30px;\r\n  border-radius: 12px;\r\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\r\n  max-width: 400px;\r\n  width: 100%;\r\n  text-align: center;\r\n  border: 1px solid #e0e0e0;\r\n  transition: transform 0.3s ease-in-out;\r\n}\r\n\r\n/* Efekat na hover za container */\r\n.container:hover {\r\n  transform: translateY(-5px);\r\n}\r\n\r\n/* Input polje za unos teksta */\r\ninput {\r\n  padding: 12px;\r\n  width: 100%;\r\n  margin: 10px 0;\r\n  border-radius: 6px;\r\n  border: 1px solid #ccc;\r\n  box-sizing: border-box;\r\n  font-size: 16px;\r\n  transition: border-color 0.3s;\r\n}\r\n\r\ninput:focus {\r\n  border-color: #007bff;\r\n  outline: none;\r\n}\r\n\r\n/* Dugme */\r\nbutton {\r\n  padding: 12px 20px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 6px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n/* QR kod */\r\n#qrcode {\r\n  margin-top: 20px;\r\n  border: 1px solid #ddd;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n  background-color: #fff;\r\n  max-width: 100%;\r\n  width: 300px;\r\n  margin: 20px auto;\r\n}\r\n/* PREUZIMANJE QR koda */\r\n#downloadBtn {\r\n  margin-top: 20px;\r\n  padding: 10px 20px;\r\n  background-color: #28a745;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n}\r\n\r\n#downloadBtn:hover {\r\n  background-color: #218838;\r\n}\r\n\r\n#downloadBtn:focus {\r\n  outline: none;\r\n}\r\n\r\n\r\n/* Mobile responsive dizajn */\r\n@media (max-width: 480px) {\r\n  .container {\r\n    padding: 20px;\r\n    width: 90%;\r\n  }\r\n\r\n  button {\r\n    font-size: 14px;\r\n    padding: 10px;\r\n  }\r\n\r\n  input {\r\n    font-size: 14px;\r\n    padding: 10px;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const s=a},113:t=>{"use strict";t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},157:(t,n,e)=>{const r=e(886),o=e(953),i=e(899),a=e(820),s=e(421),c=e(756),u=e(332),d=e(518),l=e(764),f=e(427),h=e(565),g=e(208),A=e(801);function p(t,n,e){const r=t.size,o=h.getEncodedBits(n,e);let i,a;for(i=0;i<15;i++)a=1==(o>>i&1),i<6?t.set(i,8,a,!0):i<8?t.set(i+1,8,a,!0):t.set(r-15+i,8,a,!0),i<8?t.set(8,r-i-1,a,!0):i<9?t.set(8,15-i-1+1,a,!0):t.set(8,15-i-1,a,!0);t.set(r-8,8,1,!0)}function E(t,n,e,o){let h;if(Array.isArray(t))h=A.fromArray(t);else{if("string"!=typeof t)throw new Error("Invalid data");{let r=n;if(!r){const n=A.rawSplit(t);r=f.getBestVersionForData(n,e)}h=A.fromString(t,r||40)}}const E=f.getBestVersionForData(h,e);if(!E)throw new Error("The amount of data is too big to be stored in a QR Code");if(n){if(n<E)throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "+E+".\n")}else n=E;const m=function(t,n,e){const o=new i;e.forEach(function(n){o.put(n.mode.bit,4),o.put(n.getLength(),g.getCharCountIndicator(n.mode,t)),n.write(o)});const a=8*(r.getSymbolTotalCodewords(t)-d.getTotalCodewordsCount(t,n));for(o.getLengthInBits()+4<=a&&o.put(0,4);o.getLengthInBits()%8!=0;)o.putBit(0);const s=(a-o.getLengthInBits())/8;for(let t=0;t<s;t++)o.put(t%2?17:236,8);return function(t,n,e){const o=r.getSymbolTotalCodewords(n),i=o-d.getTotalCodewordsCount(n,e),a=d.getBlocksCount(n,e),s=a-o%a,c=Math.floor(o/a),u=Math.floor(i/a),f=u+1,h=c-u,g=new l(h);let A=0;const p=new Array(a),E=new Array(a);let m=0;const C=new Uint8Array(t.buffer);for(let t=0;t<a;t++){const n=t<s?u:f;p[t]=C.slice(A,A+n),E[t]=g.encode(p[t]),A+=n,m=Math.max(m,n)}const B=new Uint8Array(o);let w,y,b=0;for(w=0;w<m;w++)for(y=0;y<a;y++)w<p[y].length&&(B[b++]=p[y][w]);for(w=0;w<h;w++)for(y=0;y<a;y++)B[b++]=E[y][w];return B}(o,t,n)}(n,e,h),C=r.getSymbolSize(n),B=new a(C);return function(t,n){const e=t.size,r=c.getPositions(n);for(let n=0;n<r.length;n++){const o=r[n][0],i=r[n][1];for(let n=-1;n<=7;n++)if(!(o+n<=-1||e<=o+n))for(let r=-1;r<=7;r++)i+r<=-1||e<=i+r||(n>=0&&n<=6&&(0===r||6===r)||r>=0&&r<=6&&(0===n||6===n)||n>=2&&n<=4&&r>=2&&r<=4?t.set(o+n,i+r,!0,!0):t.set(o+n,i+r,!1,!0))}}(B,n),function(t){const n=t.size;for(let e=8;e<n-8;e++){const n=e%2==0;t.set(e,6,n,!0),t.set(6,e,n,!0)}}(B),function(t,n){const e=s.getPositions(n);for(let n=0;n<e.length;n++){const r=e[n][0],o=e[n][1];for(let n=-2;n<=2;n++)for(let e=-2;e<=2;e++)-2===n||2===n||-2===e||2===e||0===n&&0===e?t.set(r+n,o+e,!0,!0):t.set(r+n,o+e,!1,!0)}}(B,n),p(B,e,0),n>=7&&function(t,n){const e=t.size,r=f.getEncodedBits(n);let o,i,a;for(let n=0;n<18;n++)o=Math.floor(n/3),i=n%3+e-8-3,a=1==(r>>n&1),t.set(o,i,a,!0),t.set(i,o,a,!0)}(B,n),function(t,n){const e=t.size;let r=-1,o=e-1,i=7,a=0;for(let s=e-1;s>0;s-=2)for(6===s&&s--;;){for(let e=0;e<2;e++)if(!t.isReserved(o,s-e)){let r=!1;a<n.length&&(r=1==(n[a]>>>i&1)),t.set(o,s-e,r),i--,-1===i&&(a++,i=7)}if(o+=r,o<0||e<=o){o-=r,r=-r;break}}}(B,m),isNaN(o)&&(o=u.getBestMask(B,p.bind(null,B,e))),u.applyMask(o,B),p(B,e,o),{modules:B,version:n,errorCorrectionLevel:e,maskPattern:o,segments:h}}n.create=function(t,n){if(void 0===t||""===t)throw new Error("No input text");let e,i,a=o.M;return void 0!==n&&(a=o.from(n.errorCorrectionLevel,o.M),e=f.from(n.version),i=u.from(n.maskPattern),n.toSJISFunc&&r.setToSJISFunction(n.toSJISFunc)),E(t,e,a,i)}},208:(t,n,e)=>{const r=e(878),o=e(44);n.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]},n.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]},n.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]},n.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]},n.MIXED={bit:-1},n.getCharCountIndicator=function(t,n){if(!t.ccBits)throw new Error("Invalid mode: "+t);if(!r.isValid(n))throw new Error("Invalid version: "+n);return n>=1&&n<10?t.ccBits[0]:n<27?t.ccBits[1]:t.ccBits[2]},n.getBestModeForData=function(t){return o.testNumeric(t)?n.NUMERIC:o.testAlphanumeric(t)?n.ALPHANUMERIC:o.testKanji(t)?n.KANJI:n.BYTE},n.toString=function(t){if(t&&t.id)return t.id;throw new Error("Invalid mode")},n.isValid=function(t){return t&&t.bit&&t.ccBits},n.from=function(t,e){if(n.isValid(t))return t;try{return function(t){if("string"!=typeof t)throw new Error("Param is not a string");switch(t.toLowerCase()){case"numeric":return n.NUMERIC;case"alphanumeric":return n.ALPHANUMERIC;case"kanji":return n.KANJI;case"byte":return n.BYTE;default:throw new Error("Unknown mode: "+t)}}(t)}catch(t){return e}}},280:(t,n,e)=>{const r=e(726);n.render=function(t,n,e){let o=e,i=n;void 0!==o||n&&n.getContext||(o=n,n=void 0),n||(i=function(){try{return document.createElement("canvas")}catch(t){throw new Error("You need to specify a canvas element")}}()),o=r.getOptions(o);const a=r.getImageWidth(t.modules.size,o),s=i.getContext("2d"),c=s.createImageData(a,a);return r.qrToImageData(c.data,t,o),function(t,n,e){t.clearRect(0,0,n.width,n.height),n.style||(n.style={}),n.height=e,n.width=e,n.style.height=e+"px",n.style.width=e+"px"}(s,i,a),s.putImageData(c,0,0),i},n.renderToDataURL=function(t,e,r){let o=r;void 0!==o||e&&e.getContext||(o=e,e=void 0),o||(o={});const i=n.render(t,e,o),a=o.type||"image/png",s=o.rendererOpts||{};return i.toDataURL(a,s.quality)}},314:t=>{"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e}).join("")},n.i=function(t,e,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<t.length;u++){var d=[].concat(t[u]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},320:t=>{"use strict";var n={single_source_shortest_paths:function(t,e,r){var o={},i={};i[e]=0;var a,s,c,u,d,l,f,h=n.PriorityQueue.make();for(h.push(e,0);!h.empty();)for(c in s=(a=h.pop()).value,u=a.cost,d=t[s]||{})d.hasOwnProperty(c)&&(l=u+d[c],f=i[c],(void 0===i[c]||f>l)&&(i[c]=l,h.push(c,l),o[c]=s));if(void 0!==r&&void 0===i[r]){var g=["Could not find a path from ",e," to ",r,"."].join("");throw new Error(g)}return o},extract_shortest_path_from_predecessor_list:function(t,n){for(var e=[],r=n;r;)e.push(r),t[r],r=t[r];return e.reverse(),e},find_path:function(t,e,r){var o=n.single_source_shortest_paths(t,e,r);return n.extract_shortest_path_from_predecessor_list(o,r)},PriorityQueue:{make:function(t){var e,r=n.PriorityQueue,o={};for(e in t=t||{},r)r.hasOwnProperty(e)&&(o[e]=r[e]);return o.queue=[],o.sorter=t.sorter||r.default_sorter,o},default_sorter:function(t,n){return t.cost-n.cost},push:function(t,n){var e={value:t,cost:n};this.queue.push(e),this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},empty:function(){return 0===this.queue.length}}};t.exports=n},332:(t,n)=>{n.Patterns={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7};function e(t,e,r){switch(t){case n.Patterns.PATTERN000:return(e+r)%2==0;case n.Patterns.PATTERN001:return e%2==0;case n.Patterns.PATTERN010:return r%3==0;case n.Patterns.PATTERN011:return(e+r)%3==0;case n.Patterns.PATTERN100:return(Math.floor(e/2)+Math.floor(r/3))%2==0;case n.Patterns.PATTERN101:return e*r%2+e*r%3==0;case n.Patterns.PATTERN110:return(e*r%2+e*r%3)%2==0;case n.Patterns.PATTERN111:return(e*r%3+(e+r)%2)%2==0;default:throw new Error("bad maskPattern:"+t)}}n.isValid=function(t){return null!=t&&""!==t&&!isNaN(t)&&t>=0&&t<=7},n.from=function(t){return n.isValid(t)?parseInt(t,10):void 0},n.getPenaltyN1=function(t){const n=t.size;let e=0,r=0,o=0,i=null,a=null;for(let s=0;s<n;s++){r=o=0,i=a=null;for(let c=0;c<n;c++){let n=t.get(s,c);n===i?r++:(r>=5&&(e+=r-5+3),i=n,r=1),n=t.get(c,s),n===a?o++:(o>=5&&(e+=o-5+3),a=n,o=1)}r>=5&&(e+=r-5+3),o>=5&&(e+=o-5+3)}return e},n.getPenaltyN2=function(t){const n=t.size;let e=0;for(let r=0;r<n-1;r++)for(let o=0;o<n-1;o++){const n=t.get(r,o)+t.get(r,o+1)+t.get(r+1,o)+t.get(r+1,o+1);4!==n&&0!==n||e++}return 3*e},n.getPenaltyN3=function(t){const n=t.size;let e=0,r=0,o=0;for(let i=0;i<n;i++){r=o=0;for(let a=0;a<n;a++)r=r<<1&2047|t.get(i,a),a>=10&&(1488===r||93===r)&&e++,o=o<<1&2047|t.get(a,i),a>=10&&(1488===o||93===o)&&e++}return 40*e},n.getPenaltyN4=function(t){let n=0;const e=t.data.length;for(let r=0;r<e;r++)n+=t.data[r];return 10*Math.abs(Math.ceil(100*n/e/5)-10)},n.applyMask=function(t,n){const r=n.size;for(let o=0;o<r;o++)for(let i=0;i<r;i++)n.isReserved(i,o)||n.xor(i,o,e(t,i,o))},n.getBestMask=function(t,e){const r=Object.keys(n.Patterns).length;let o=0,i=1/0;for(let a=0;a<r;a++){e(a),n.applyMask(a,t);const r=n.getPenaltyN1(t)+n.getPenaltyN2(t)+n.getPenaltyN3(t)+n.getPenaltyN4(t);n.applyMask(a,t),r<i&&(i=r,o=a)}return o}},333:t=>{t.exports=function(){return"function"==typeof Promise&&Promise.prototype&&Promise.prototype.then}},354:t=>{"use strict";t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},357:(t,n,e)=>{const r=e(208);function o(t){this.mode=r.NUMERIC,this.data=t.toString()}o.getBitsLength=function(t){return 10*Math.floor(t/3)+(t%3?t%3*3+1:0)},o.prototype.getLength=function(){return this.data.length},o.prototype.getBitsLength=function(){return o.getBitsLength(this.data.length)},o.prototype.write=function(t){let n,e,r;for(n=0;n+3<=this.data.length;n+=3)e=this.data.substr(n,3),r=parseInt(e,10),t.put(r,10);const o=this.data.length-n;o>0&&(e=this.data.substr(n),r=parseInt(e,10),t.put(r,3*o+1))},t.exports=o},375:(t,n,e)=>{const r=e(726);function o(t,n){const e=t.a/255,r=n+'="'+t.hex+'"';return e<1?r+" "+n+'-opacity="'+e.toFixed(2).slice(1)+'"':r}function i(t,n,e){let r=t+n;return void 0!==e&&(r+=" "+e),r}n.render=function(t,n,e){const a=r.getOptions(n),s=t.modules.size,c=t.modules.data,u=s+2*a.margin,d=a.color.light.a?"<path "+o(a.color.light,"fill")+' d="M0 0h'+u+"v"+u+'H0z"/>':"",l="<path "+o(a.color.dark,"stroke")+' d="'+function(t,n,e){let r="",o=0,a=!1,s=0;for(let c=0;c<t.length;c++){const u=Math.floor(c%n),d=Math.floor(c/n);u||a||(a=!0),t[c]?(s++,c>0&&u>0&&t[c-1]||(r+=a?i("M",u+e,.5+d+e):i("m",o,0),o=0,a=!1),u+1<n&&t[c+1]||(r+=i("h",s),s=0)):o++}return r}(c,s,a.margin)+'"/>',f='viewBox="0 0 '+u+" "+u+'"',h='<svg xmlns="http://www.w3.org/2000/svg" '+(a.width?'width="'+a.width+'" height="'+a.width+'" ':"")+f+' shape-rendering="crispEdges">'+d+l+"</svg>\n";return"function"==typeof e&&e(null,h),h}},421:(t,n,e)=>{const r=e(886).getSymbolSize;n.getRowColCoords=function(t){if(1===t)return[];const n=Math.floor(t/7)+2,e=r(t),o=145===e?26:2*Math.ceil((e-13)/(2*n-2)),i=[e-7];for(let t=1;t<n-1;t++)i[t]=i[t-1]-o;return i.push(6),i.reverse()},n.getPositions=function(t){const e=[],r=n.getRowColCoords(t),o=r.length;for(let t=0;t<o;t++)for(let n=0;n<o;n++)0===t&&0===n||0===t&&n===o-1||t===o-1&&0===n||e.push([r[t],r[n]]);return e}},427:(t,n,e)=>{const r=e(886),o=e(518),i=e(953),a=e(208),s=e(878),c=r.getBCHDigit(7973);function u(t,n){return a.getCharCountIndicator(t,n)+4}function d(t,n){let e=0;return t.forEach(function(t){const r=u(t.mode,n);e+=r+t.getBitsLength()}),e}n.from=function(t,n){return s.isValid(t)?parseInt(t,10):n},n.getCapacity=function(t,n,e){if(!s.isValid(t))throw new Error("Invalid QR Code version");void 0===e&&(e=a.BYTE);const i=8*(r.getSymbolTotalCodewords(t)-o.getTotalCodewordsCount(t,n));if(e===a.MIXED)return i;const c=i-u(e,t);switch(e){case a.NUMERIC:return Math.floor(c/10*3);case a.ALPHANUMERIC:return Math.floor(c/11*2);case a.KANJI:return Math.floor(c/13);case a.BYTE:default:return Math.floor(c/8)}},n.getBestVersionForData=function(t,e){let r;const o=i.from(e,i.M);if(Array.isArray(t)){if(t.length>1)return function(t,e){for(let r=1;r<=40;r++)if(d(t,r)<=n.getCapacity(r,e,a.MIXED))return r}(t,o);if(0===t.length)return 1;r=t[0]}else r=t;return function(t,e,r){for(let o=1;o<=40;o++)if(e<=n.getCapacity(o,r,t))return o}(r.mode,r.getLength(),o)},n.getEncodedBits=function(t){if(!s.isValid(t)||t<7)throw new Error("Invalid QR Code version");let n=t<<12;for(;r.getBCHDigit(n)-c>=0;)n^=7973<<r.getBCHDigit(n)-c;return t<<12|n}},433:(t,n,e)=>{const r=e(208),o=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":"];function i(t){this.mode=r.ALPHANUMERIC,this.data=t}i.getBitsLength=function(t){return 11*Math.floor(t/2)+t%2*6},i.prototype.getLength=function(){return this.data.length},i.prototype.getBitsLength=function(){return i.getBitsLength(this.data.length)},i.prototype.write=function(t){let n;for(n=0;n+2<=this.data.length;n+=2){let e=45*o.indexOf(this.data[n]);e+=o.indexOf(this.data[n+1]),t.put(e,11)}this.data.length%2&&t.put(o.indexOf(this.data[n]),6)},t.exports=i},518:(t,n,e)=>{const r=e(953),o=[1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,4,1,2,4,4,2,4,4,4,2,4,6,5,2,4,6,6,2,5,8,8,4,5,8,8,4,5,8,11,4,8,10,11,4,9,12,16,4,9,16,16,6,10,12,18,6,10,17,16,6,11,16,19,6,13,18,21,7,14,21,25,8,16,20,25,8,17,23,25,9,17,23,34,9,18,25,30,10,20,27,32,12,21,29,35,12,23,34,37,12,25,34,40,13,26,35,42,14,28,38,45,15,29,40,48,16,31,43,51,17,33,45,54,18,35,48,57,19,37,51,60,19,38,53,63,20,40,56,66,21,43,59,70,22,45,62,74,24,47,65,77,25,49,68,81],i=[7,10,13,17,10,16,22,28,15,26,36,44,20,36,52,64,26,48,72,88,36,64,96,112,40,72,108,130,48,88,132,156,60,110,160,192,72,130,192,224,80,150,224,264,96,176,260,308,104,198,288,352,120,216,320,384,132,240,360,432,144,280,408,480,168,308,448,532,180,338,504,588,196,364,546,650,224,416,600,700,224,442,644,750,252,476,690,816,270,504,750,900,300,560,810,960,312,588,870,1050,336,644,952,1110,360,700,1020,1200,390,728,1050,1260,420,784,1140,1350,450,812,1200,1440,480,868,1290,1530,510,924,1350,1620,540,980,1440,1710,570,1036,1530,1800,570,1064,1590,1890,600,1120,1680,1980,630,1204,1770,2100,660,1260,1860,2220,720,1316,1950,2310,750,1372,2040,2430];n.getBlocksCount=function(t,n){switch(n){case r.L:return o[4*(t-1)+0];case r.M:return o[4*(t-1)+1];case r.Q:return o[4*(t-1)+2];case r.H:return o[4*(t-1)+3];default:return}},n.getTotalCodewordsCount=function(t,n){switch(n){case r.L:return i[4*(t-1)+0];case r.M:return i[4*(t-1)+1];case r.Q:return i[4*(t-1)+2];case r.H:return i[4*(t-1)+3];default:return}}},540:t=>{"use strict";t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{const r=e(886),o=r.getBCHDigit(1335);n.getEncodedBits=function(t,n){const e=t.bit<<3|n;let i=e<<10;for(;r.getBCHDigit(i)-o>=0;)i^=1335<<r.getBCHDigit(i)-o;return 21522^(e<<10|i)}},583:(t,n,e)=>{const r=e(333),o=e(157),i=e(280),a=e(375);function s(t,n,e,i,a){const s=[].slice.call(arguments,1),c=s.length,u="function"==typeof s[c-1];if(!u&&!r())throw new Error("Callback required as last argument");if(!u){if(c<1)throw new Error("Too few arguments provided");return 1===c?(e=n,n=i=void 0):2!==c||n.getContext||(i=e,e=n,n=void 0),new Promise(function(r,a){try{const a=o.create(e,i);r(t(a,n,i))}catch(t){a(t)}})}if(c<2)throw new Error("Too few arguments provided");2===c?(a=e,e=n,n=i=void 0):3===c&&(n.getContext&&void 0===a?(a=i,i=void 0):(a=i,i=e,e=n,n=void 0));try{const r=o.create(e,i);a(null,t(r,n,i))}catch(t){a(t)}}n.create=o.create,n.toCanvas=s.bind(null,i.render),n.toDataURL=s.bind(null,i.renderToDataURL),n.toString=s.bind(null,function(t,n,e){return a.render(t,e)})},659:t=>{"use strict";var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},713:(t,n,e)=>{const r=e(731);n.mul=function(t,n){const e=new Uint8Array(t.length+n.length-1);for(let o=0;o<t.length;o++)for(let i=0;i<n.length;i++)e[o+i]^=r.mul(t[o],n[i]);return e},n.mod=function(t,n){let e=new Uint8Array(t);for(;e.length-n.length>=0;){const t=e[0];for(let o=0;o<n.length;o++)e[o]^=r.mul(n[o],t);let o=0;for(;o<e.length&&0===e[o];)o++;e=e.slice(o)}return e},n.generateECPolynomial=function(t){let e=new Uint8Array([1]);for(let o=0;o<t;o++)e=n.mul(e,new Uint8Array([1,r.exp(o)]));return e}},726:(t,n)=>{function e(t){if("number"==typeof t&&(t=t.toString()),"string"!=typeof t)throw new Error("Color should be defined as hex string");let n=t.slice().replace("#","").split("");if(n.length<3||5===n.length||n.length>8)throw new Error("Invalid hex color: "+t);3!==n.length&&4!==n.length||(n=Array.prototype.concat.apply([],n.map(function(t){return[t,t]}))),6===n.length&&n.push("F","F");const e=parseInt(n.join(""),16);return{r:e>>24&255,g:e>>16&255,b:e>>8&255,a:255&e,hex:"#"+n.slice(0,6).join("")}}n.getOptions=function(t){t||(t={}),t.color||(t.color={});const n=void 0===t.margin||null===t.margin||t.margin<0?4:t.margin,r=t.width&&t.width>=21?t.width:void 0,o=t.scale||4;return{width:r,scale:r?4:o,margin:n,color:{dark:e(t.color.dark||"#000000ff"),light:e(t.color.light||"#ffffffff")},type:t.type,rendererOpts:t.rendererOpts||{}}},n.getScale=function(t,n){return n.width&&n.width>=t+2*n.margin?n.width/(t+2*n.margin):n.scale},n.getImageWidth=function(t,e){const r=n.getScale(t,e);return Math.floor((t+2*e.margin)*r)},n.qrToImageData=function(t,e,r){const o=e.modules.size,i=e.modules.data,a=n.getScale(o,r),s=Math.floor((o+2*r.margin)*a),c=r.margin*a,u=[r.color.light,r.color.dark];for(let n=0;n<s;n++)for(let e=0;e<s;e++){let d=4*(n*s+e),l=r.color.light;n>=c&&e>=c&&n<s-c&&e<s-c&&(l=u[i[Math.floor((n-c)/a)*o+Math.floor((e-c)/a)]?1:0]),t[d++]=l.r,t[d++]=l.g,t[d++]=l.b,t[d]=l.a}}},731:(t,n)=>{const e=new Uint8Array(512),r=new Uint8Array(256);!function(){let t=1;for(let n=0;n<255;n++)e[n]=t,r[t]=n,t<<=1,256&t&&(t^=285);for(let t=255;t<512;t++)e[t]=e[t-255]}(),n.log=function(t){if(t<1)throw new Error("log("+t+")");return r[t]},n.exp=function(t){return e[t]},n.mul=function(t,n){return 0===t||0===n?0:e[r[t]+r[n]]}},756:(t,n,e)=>{const r=e(886).getSymbolSize;n.getPositions=function(t){const n=r(t);return[[0,0],[n-7,0],[0,n-7]]}},764:(t,n,e)=>{const r=e(713);function o(t){this.genPoly=void 0,this.degree=t,this.degree&&this.initialize(this.degree)}o.prototype.initialize=function(t){this.degree=t,this.genPoly=r.generateECPolynomial(this.degree)},o.prototype.encode=function(t){if(!this.genPoly)throw new Error("Encoder not initialized");const n=new Uint8Array(t.length+this.degree);n.set(t);const e=r.mod(n,this.genPoly),o=this.degree-e.length;if(o>0){const t=new Uint8Array(this.degree);return t.set(e,o),t}return e},t.exports=o},801:(t,n,e)=>{const r=e(208),o=e(357),i=e(433),a=e(822),s=e(861),c=e(44),u=e(886),d=e(320);function l(t){return unescape(encodeURIComponent(t)).length}function f(t,n,e){const r=[];let o;for(;null!==(o=t.exec(e));)r.push({data:o[0],index:o.index,mode:n,length:o[0].length});return r}function h(t){const n=f(c.NUMERIC,r.NUMERIC,t),e=f(c.ALPHANUMERIC,r.ALPHANUMERIC,t);let o,i;return u.isKanjiModeEnabled()?(o=f(c.BYTE,r.BYTE,t),i=f(c.KANJI,r.KANJI,t)):(o=f(c.BYTE_KANJI,r.BYTE,t),i=[]),n.concat(e,o,i).sort(function(t,n){return t.index-n.index}).map(function(t){return{data:t.data,mode:t.mode,length:t.length}})}function g(t,n){switch(n){case r.NUMERIC:return o.getBitsLength(t);case r.ALPHANUMERIC:return i.getBitsLength(t);case r.KANJI:return s.getBitsLength(t);case r.BYTE:return a.getBitsLength(t)}}function A(t,n){let e;const c=r.getBestModeForData(t);if(e=r.from(n,c),e!==r.BYTE&&e.bit<c.bit)throw new Error('"'+t+'" cannot be encoded with mode '+r.toString(e)+".\n Suggested mode is: "+r.toString(c));switch(e!==r.KANJI||u.isKanjiModeEnabled()||(e=r.BYTE),e){case r.NUMERIC:return new o(t);case r.ALPHANUMERIC:return new i(t);case r.KANJI:return new s(t);case r.BYTE:return new a(t)}}n.fromArray=function(t){return t.reduce(function(t,n){return"string"==typeof n?t.push(A(n,null)):n.data&&t.push(A(n.data,n.mode)),t},[])},n.fromString=function(t,e){const o=function(t){const n=[];for(let e=0;e<t.length;e++){const o=t[e];switch(o.mode){case r.NUMERIC:n.push([o,{data:o.data,mode:r.ALPHANUMERIC,length:o.length},{data:o.data,mode:r.BYTE,length:o.length}]);break;case r.ALPHANUMERIC:n.push([o,{data:o.data,mode:r.BYTE,length:o.length}]);break;case r.KANJI:n.push([o,{data:o.data,mode:r.BYTE,length:l(o.data)}]);break;case r.BYTE:n.push([{data:o.data,mode:r.BYTE,length:l(o.data)}])}}return n}(h(t,u.isKanjiModeEnabled())),i=function(t,n){const e={},o={start:{}};let i=["start"];for(let a=0;a<t.length;a++){const s=t[a],c=[];for(let t=0;t<s.length;t++){const u=s[t],d=""+a+t;c.push(d),e[d]={node:u,lastCount:0},o[d]={};for(let t=0;t<i.length;t++){const a=i[t];e[a]&&e[a].node.mode===u.mode?(o[a][d]=g(e[a].lastCount+u.length,u.mode)-g(e[a].lastCount,u.mode),e[a].lastCount+=u.length):(e[a]&&(e[a].lastCount=u.length),o[a][d]=g(u.length,u.mode)+4+r.getCharCountIndicator(u.mode,n))}}i=c}for(let t=0;t<i.length;t++)o[i[t]].end=0;return{map:o,table:e}}(o,e),a=d.find_path(i.map,"start","end"),s=[];for(let t=1;t<a.length-1;t++)s.push(i.table[a[t]].node);return n.fromArray(s.reduce(function(t,n){const e=t.length-1>=0?t[t.length-1]:null;return e&&e.mode===n.mode?(t[t.length-1].data+=n.data,t):(t.push(n),t)},[]))},n.rawSplit=function(t){return n.fromArray(h(t,u.isKanjiModeEnabled()))}},820:t=>{function n(t){if(!t||t<1)throw new Error("BitMatrix size must be defined and greater than 0");this.size=t,this.data=new Uint8Array(t*t),this.reservedBit=new Uint8Array(t*t)}n.prototype.set=function(t,n,e,r){const o=t*this.size+n;this.data[o]=e,r&&(this.reservedBit[o]=!0)},n.prototype.get=function(t,n){return this.data[t*this.size+n]},n.prototype.xor=function(t,n,e){this.data[t*this.size+n]^=e},n.prototype.isReserved=function(t,n){return this.reservedBit[t*this.size+n]},t.exports=n},822:(t,n,e)=>{const r=e(208);function o(t){this.mode=r.BYTE,this.data="string"==typeof t?(new TextEncoder).encode(t):new Uint8Array(t)}o.getBitsLength=function(t){return 8*t},o.prototype.getLength=function(){return this.data.length},o.prototype.getBitsLength=function(){return o.getBitsLength(this.data.length)},o.prototype.write=function(t){for(let n=0,e=this.data.length;n<e;n++)t.put(this.data[n],8)},t.exports=o},825:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},861:(t,n,e)=>{const r=e(208),o=e(886);function i(t){this.mode=r.KANJI,this.data=t}i.getBitsLength=function(t){return 13*t},i.prototype.getLength=function(){return this.data.length},i.prototype.getBitsLength=function(){return i.getBitsLength(this.data.length)},i.prototype.write=function(t){let n;for(n=0;n<this.data.length;n++){let e=o.toSJIS(this.data[n]);if(e>=33088&&e<=40956)e-=33088;else{if(!(e>=57408&&e<=60351))throw new Error("Invalid SJIS character: "+this.data[n]+"\nMake sure your charset is UTF-8");e-=49472}e=192*(e>>>8&255)+(255&e),t.put(e,13)}},t.exports=i},878:(t,n)=>{n.isValid=function(t){return!isNaN(t)&&t>=1&&t<=40}},886:(t,n)=>{let e;const r=[0,26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706];n.getSymbolSize=function(t){if(!t)throw new Error('"version" cannot be null or undefined');if(t<1||t>40)throw new Error('"version" should be in range from 1 to 40');return 4*t+17},n.getSymbolTotalCodewords=function(t){return r[t]},n.getBCHDigit=function(t){let n=0;for(;0!==t;)n++,t>>>=1;return n},n.setToSJISFunction=function(t){if("function"!=typeof t)throw new Error('"toSJISFunc" is not a valid function.');e=t},n.isKanjiModeEnabled=function(){return void 0!==e},n.toSJIS=function(t){return e(t)}},899:t=>{function n(){this.buffer=[],this.length=0}n.prototype={get:function(t){const n=Math.floor(t/8);return 1==(this.buffer[n]>>>7-t%8&1)},put:function(t,n){for(let e=0;e<n;e++)this.putBit(1==(t>>>n-e-1&1))},getLengthInBits:function(){return this.length},putBit:function(t){const n=Math.floor(this.length/8);this.buffer.length<=n&&this.buffer.push(0),t&&(this.buffer[n]|=128>>>this.length%8),this.length++}},t.exports=n},953:(t,n)=>{n.L={bit:1},n.M={bit:0},n.Q={bit:3},n.H={bit:2},n.isValid=function(t){return t&&void 0!==t.bit&&t.bit>=0&&t.bit<4},n.from=function(t,e){if(n.isValid(t))return t;try{return function(t){if("string"!=typeof t)throw new Error("Param is not a string");switch(t.toLowerCase()){case"l":case"low":return n.L;case"m":case"medium":return n.M;case"q":case"quartile":return n.Q;case"h":case"high":return n.H;default:throw new Error("Unknown EC Level: "+t)}}(t)}catch(t){return e}}}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return t[r](i,i.exports,e),i.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{"use strict";var t=e(583),n=e(72),r=e.n(n),o=e(825),i=e.n(o),a=e(659),s=e.n(a),c=e(56),u=e.n(c),d=e(540),l=e.n(d),f=e(113),h=e.n(f),g=e(83),A={};A.styleTagTransform=h(),A.setAttributes=u(),A.insert=s().bind(null,"head"),A.domAPI=i(),A.insertStyleElement=l(),r()(g.A,A),g.A&&g.A.locals&&g.A.locals;const p=document.getElementById("generateBtn"),E=document.getElementById("inputText"),m=document.getElementById("qrcode"),C=document.getElementById("downloadBtn");function B(){const n=E.value;t.toDataURL(n,{width:256},(t,n)=>{if(t)console.error("Greška pri generisanju slike QR koda:",t);else{const t=document.createElement("a");t.href=n,t.download="qr-code.png",t.click()}})}p.addEventListener("click",()=>{const n=E.value;if(n){m.innerHTML="";const e=document.createElement("canvas");m.appendChild(e),t.toCanvas(e,n,{errorCorrectionLevel:"H",width:256,margin:2},t=>{t?(console.error("Greška prilikom generisanja QR koda:",t),alert(`Došlo je do greške pri generisanju QR koda: ${t.message}`)):(console.log("QR kod uspešno generisan!"),C.style.display="inline-block",C.removeEventListener("click",B),C.addEventListener("click",B))})}else alert("Molimo vas unesite tekst za generisanje QR koda!")})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,